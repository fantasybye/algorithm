import java.util.*;

public class Main {
    static int[] row ={0,0,-1,1};
    static int[] col ={1,-1,0,0};

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int count = s.nextInt();
        while(count-->0){
            int n = s.nextInt();
            int[][] arr = new int[n][n];
            int[][] dp = new int[n][n];
            for(int i = 0; i < n; i++){
                for(int j = 0; j < n; j++){
                    arr[i][j] = s.nextInt();
                    dp[i][j] = Integer.MAX_VALUE;
                }
            }
            System.out.println(findMinPath(arr,dp,n));
        }
    }
    static class Cell{
        int x;
        int y;
        Cell(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    public static int findMinPath(int[][] arr,int[][] dp,int n){
        Queue<Cell> q = new LinkedList<>();
        q.add(new Cell(0,0));
        dp[0][0] = arr[0][0];
        while (!q.isEmpty()){
            Cell c = q.poll();
            for(int i = 0;i < 4;i++){
                int x = row[i] + c.x;
                int y = col[i] + c.y;
                if(x>=0&&y>=0&&x<n&&y<n){
                    int dis = dp[c.x][c.y]+arr[x][y];
                    if(dp[x][y] > dis){
                        dp[x][y] = dis;
                        q.add(new Cell(x,y));
                    }
                }
            }
        }
        return dp[n-1][n-1];
    }
}