import java.util.Scanner;

/**
 * Description
 * 有一个由N个实数构成的数组，如果一对元素A[i]和A[j]是倒序的，即i<j但是A[i]>A[j]则称它们是一个倒置，
 * 设计一个计算该数组中所有倒置数量的算法。要求算法复杂度为O(nlogn)
 *
 * Input
 * 输入有多行，第一行整数T表示为测试用例个数，后面是T个测试用例，每一个用例包括两行，第一行的一个整数是元素个数，第二行为用空格隔开的数组值。
 *
 *
 * Output
 * 输出每一个用例的倒置个数，一行表示一个用例。
 *
 * Sample Input 1
 * 1
 * 8
 * 8 3 2 9 7 1 5 4
 *
 * Sample Output 1
 * 17
 * 思路：采用归并排序
 *
 */
public class Main {
    public static void main(String args[]){
        Scanner sc=new Scanner(System.in);
        int T=sc.nextInt();
        for(int i=0;i<T;i++){
            int N=sc.nextInt();
            int a[]=new int[N];
            for(int j=0;j<N;j++) a[j]=sc.nextInt();
            System.out.println(mergeSort(a,0,a.length-1));
        }

    }

    public static int   mergeSort(int[] array,int start,int end){
        if(start>=end) return 0;
        int mid=(start+end)/2;
        return  mergeSort(array,start,mid)+mergeSort(array, mid+1, end)+merge(array,start,end,mid);
    }
    public static int  merge(int[] array,int left,int right,int mid){
        //合并
        int total=0;
        int i=left;//左
        int j=mid+1;//右侧
        int newArray[]=new int[right-left+1];
        int index=0;
        while(i<=mid&&j<=right){
            if(array[i]<=array[j]){
               newArray[index++]=array[i++];
            }else{
                newArray[index++]=array[j++];
                //则i比j要大，则i后面都比j大
                total+=mid-i+1;
            }
        }
        while(i<=mid){
            newArray[index++]=array[i++];
        }
        while (j<=right){
            newArray[index++]=array[j++];
        }
        //写回
        for(int k=0;k<right-left+1;k++){
            array[k+left]=newArray[k];
        }
        return  total;

    }

}
